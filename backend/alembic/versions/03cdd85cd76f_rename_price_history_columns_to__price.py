"""Rename price_history columns to *_price

Revision ID: 03cdd85cd76f
Revises: 55d095397ce8
Create Date: 2025-07-16 09:52:00.494583

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '03cdd85cd76f'
down_revision: Union[str, Sequence[str], None] = '55d095397ce8'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_holding_id'), table_name='holding')
    op.drop_table('holding')
    op.drop_index(op.f('ix_stock_id'), table_name='stock')
    op.drop_index(op.f('ix_stock_ticker'), table_name='stock')
    op.drop_table('stock')
    op.drop_index(op.f('ix_watchlist_entry_id'), table_name='watchlist_entry')
    op.drop_table('watchlist_entry')
    op.drop_index(op.f('ix_price_history_id'), table_name='price_history')
    op.drop_table('price_history')
    op.drop_index(op.f('ix_stock_transaction_id'), table_name='stock_transaction')
    op.drop_table('stock_transaction')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('stock_transaction',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('price_per_share', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stock_id'], ['stock.id'], name=op.f('stock_transaction_stock_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('stock_transaction_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('stock_transaction_pkey'))
    )
    op.create_index(op.f('ix_stock_transaction_id'), 'stock_transaction', ['id'], unique=False)
    op.create_table('price_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('stock_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('close_price', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['stock_id'], ['stock.id'], name=op.f('price_history_stock_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('price_history_pkey'))
    )
    op.create_index(op.f('ix_price_history_id'), 'price_history', ['id'], unique=False)
    op.create_table('watchlist_entry',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('added_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stock_id'], ['stock.id'], name=op.f('watchlist_entry_stock_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('watchlist_entry_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('watchlist_entry_pkey'))
    )
    op.create_index(op.f('ix_watchlist_entry_id'), 'watchlist_entry', ['id'], unique=False)
    op.create_table('stock',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('stock_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('ticker', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('currency', sa.VARCHAR(length=3), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('day_open', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('day_high', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('day_low', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('prev_close', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('quote_fetched_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='stock_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('ix_stock_ticker'), 'stock', ['ticker'], unique=True)
    op.create_index(op.f('ix_stock_id'), 'stock', ['id'], unique=False)
    op.create_table('holding',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('stock_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('avg_cost', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('last_price', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('market_value', sa.NUMERIC(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['stock_id'], ['stock.id'], name=op.f('holding_stock_id_fkey')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('holding_user_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('holding_pkey'))
    )
    op.create_index(op.f('ix_holding_id'), 'holding', ['id'], unique=False)
    # ### end Alembic commands ###
